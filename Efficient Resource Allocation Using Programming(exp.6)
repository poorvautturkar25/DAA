//Efficient Resource Allocation Using Programming
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Structure to represent a job
typedef struct {
    char name[10];
    int resources;
    int profit;
    float ratio;
} Job;

// Comparator function to sort jobs by profit-to-resource ratio in descending order
int compare(const void *a, const void *b) {
    float r1 = ((Job *)a)->ratio;
    float r2 = ((Job *)b)->ratio;
    return (r2 > r1) - (r2 < r1);  // Descending order
}

// Function to allocate resources using the greedy approach
void allocateResources(Job jobs[], int n, int totalResources) {
    // Sort jobs by profit-to-resource ratio
    qsort(jobs, n, sizeof(Job), compare);

    int usedResources = 0;
    int totalProfit = 0;
    int i;
    printf("\nAllocated Jobs: ");
    for (i = 0; i < n; i++) {
        if (usedResources + jobs[i].resources <= totalResources) {
            printf("%s ", jobs[i].name);
            usedResources += jobs[i].resources;
            totalProfit += jobs[i].profit;
        }
    }

    printf("\nTotal Profit: %d\n", totalProfit);
}

int main() {
    int n,i, totalResources;

    printf("Enter the number of jobs: ");
    scanf("%d", &n);

    printf("Enter the total available resources: ");
    scanf("%d", &totalResources);

    Job jobs[n];

    // Input jobs
    for (i = 0; i < n; i++) {
        printf("\nEnter details for Job %d\n", i + 1);
        printf("Job name: ");
        scanf("%s", jobs[i].name);
        printf("Required resources: ");
        scanf("%d", &jobs[i].resources);
        printf("Profit: ");
        scanf("%d", &jobs[i].profit);

        // Calculate profit-to-resource ratio
        jobs[i].ratio = (float)jobs[i].profit / jobs[i].resources;
    }

    // Allocate resources using the greedy algorithm
    allocateResources(jobs, n, totalResources);

    return 0;
}
